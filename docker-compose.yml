version: '3.5'
services:

  # Django APIコンテナ
  api:
    build: ./back_kosen_ai/
    container_name: "django_api"
    volumes:
      - ./back_kosen_ai/src:/src
    stdin_open: true # 標準入出力とエラー出力をコンテナに結びつける設定 (dockerコマンドの -i オプション)
    tty: true # 擬似端末(キーボードによる入力)をコンテナに結びつける設定 (dockerコマンドの -t オプション)
    command:
      python3 manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - minio

  # MongoDBのコンテナ
  mongo:
    image: mongo:latest
    restart: always
    environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - 27017:27017
    container_name: mongo_db
    hostname: mongo
    tty: true
    stdin_open: true
    volumes:
      # 初期データを投入するシェルスクリプトが格納されているdir
      - ./db/mongo_init:/docker-entrypoint-initdb.d
      # データの永続化
      - ./mongo_data:/data/db
      - ./configdb:/data/configdb

  # Local S3のコンテナ
  minio:
    image: minio/minio:RELEASE.2021-06-17T00-10-46Z
    container_name: minio
    environment:
        MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
        MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    entrypoint: bash

    # バケット設定情報格納フォルダの作成
    # バケットポリシーをコピー
    # 初期データをコピー（bucket自体は /data に作成される）
    # s3サーバ起動
    command: -c "
      mkdir -p /data/.minio.sys/buckets;
      cp -r /policies/* /data/.minio.sys/;
      cp -r /export/* /data/;
      /usr/bin/minio server /data;"

    volumes:
        - ./minio/data:/data # データの永続化
        - ./minio/export:/export
        - ./minio/config:/root/.minio
        - ./minio/policies:/policies

    ports:
       - 9090:9000

# volumeを定義
volumes:
  mongo_data:
