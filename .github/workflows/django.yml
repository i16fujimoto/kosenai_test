name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# ワークフロー全体で利用できるように設定
env:
  MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
  MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
  MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
  ENGINE: ${{ secrets.ENGINE }}
  PORT: ${{ secrets.PORT }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    # Docker
    - name: Docker Containar builds
      run: |
        docker-compose up -d --build
        docker ps -a

    # Unit Test
    # 環境変数を参照できないのはコンテナ内だから？envで中で設定するよりcomposeで設定した方が良い？
    # composeとDockerfileは同じ階層においた方がよい？(envを同じにできるから)
    - name: Run Tests
      # runだとできるがexecだとできないなぜ → ttyの設定が必要（出力のため）
      # (-v: --verbosity, -T: これを入れることで疑似ttyの割り当てを無効化 → GitHub ActionsのrunnerOS内にはttyデバイスはなく、docker-composeコマンドでデフォルトで疑似ttyの割り当てされます)
      # -vについてはこちらを参考：https://docs.djangoproject.com/ja/4.1/ref/django-admin/#cmdoption-verbosity
      # もしくは　https://engineeeer.com/4-pytest-options/#toc2
      run: |
        docker-compose exec -T api poetry run pytest -v --cov=kosen_ai_app/test
